/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// class Solution {
//     public TreeNode sortedListToBST(ListNode head) {
//         List<Integer> l1=new ArrayList<>();
//         if(head==null) return null;
//         ListNode temp=head;
        
//         while(temp!=null){
//             l1.add(temp.val);
            
//             temp=temp.next;
//         }
//          int a[]=new int[l1.size()];
//       for(int i=0;i<l1.size();i++){
//           a[i]=l1.get(i);
//          // System.out.println()
//       }
       
       
//          TreeNode root=arrtoBST(a,0,a.length-1);
//         return root;
//     }
    
    
    
    
//     TreeNode arrtoBST(int a[],int l,int r){
//         //base case 
//   if(l>r) return null;
//         int mid=l+(r-l)/2;
//         TreeNode root=new TreeNode(a[mid]);
//         root.left=arrtoBST(a,l,mid-1);
//         root.right=arrtoBST(a,mid+1,r);
//         return root;
        
        
//     }
// }
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
   
        
    TreeNode root=BST(head);
        return root;
    
    }
    
    
    TreeNode BST(ListNode head){
        if(head==null) return null;
        ListNode mid=midFind(head);
       
        TreeNode root=new TreeNode (mid.val);
         if(head==mid) return root;
        root.left=BST(head);
        root.right=BST(mid.next);
        return root;
    }
    
    
    ListNode midFind(ListNode head){
        if(head==null ) return null;
        
        ListNode slow=head;
        ListNode fast=head;
        ListNode prev=head;
        while(  fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        if(prev!=null) prev.next=null;
        return slow;
        
    }

}
