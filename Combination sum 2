class Solution {
    List<List<Integer>> al1=new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        
        
        List<Integer> l1=new ArrayList<>();
        int sum=0;
        Arrays.sort(candidates);
        combinations(candidates,target,l1,0,sum);
        return al1;
        
    }
    
    void combinations(int nums[],int target,List<Integer> l1,int i,int sum){
 
        
        //base case
        if(sum>target) return;
        if(target==sum)
        {
            al1.add(new ArrayList<>(l1));
            return;
        }
       
        
        for(int j=i;j<nums.length;j++){
         //          System.out.println("j is" + i);
              if(j>i && nums[j-1]==nums[j])continue;// Important point which differ it from others problem and it is similar to permutation 2 non-dublicate problem
           sum+=nums[j];
        
            l1.add(nums[j]);
          
            combinations(nums,target,l1,j+1,sum);
            l1.remove(l1.size()-1);
            sum-=nums[j];
            }
            
       
    }
}
