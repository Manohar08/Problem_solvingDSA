class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
      int dp[][] =new int [text1.length()+1][text2.length()+1];
      // for(int s[]:dp)Arrays.fill(s,-1);
        
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                if(i==0 && j==0) dp[i][j]=0;
            }
        }
             for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
             
             
             }
            return dp[text1.length()][text2.length()];
        }
        
        
       // return LCS(text1,text2,0,0,dp);
        
    }
    //Recursion with memoization or bottom up approach
 /*   int LCS(String s1,String s2,int i,int j,int dp[][]){
        
        
        //Base Case
        if(i>s1.length()-1 || j>s2.length()-1){
            
            return 0;
        }if(dp[i][j]!=0) return dp[i][j];
        
        if(s1.charAt(i)==s2.charAt(j)){
       return  dp[i][j]=1+  LCS(s1,s2,i+1,j+1,dp);
        }
        
        return     dp[i][j]= Math.max(LCS(s1,s2,i+1,j,dp),LCS(s1,s2,i,j+1,dp));
        
    } */
    
