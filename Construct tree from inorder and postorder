/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        Map<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
           hm.put(inorder[i],i);
            
        }
        
        return constructTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1,hm);
    }
    
    TreeNode constructTree(int inorder[],int instart,int inend,int postorder[],int poststart,int postend,Map<Integer,Integer> hm){
        
        if(instart>inend || poststart>postend) return null;
        
        TreeNode root=new TreeNode(postorder[postend]);
        int inroot=hm.get(root.val);
        int leftval=inroot-instart;
        
    root.left=constructTree(inorder,instart,inroot-1,postorder,poststart,poststart+leftval-1,hm);
        
        root.right=constructTree(inorder,inroot+1,inend,postorder,poststart+leftval,postend-1,hm);
        return root;
        
    }
}
